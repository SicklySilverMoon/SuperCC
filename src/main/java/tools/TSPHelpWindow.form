<?xml version="1.0" encoding="UTF-8"?>
<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="tools.TSPHelpWindow">
  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="2" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
    <margin top="0" left="0" bottom="0" right="0"/>
    <constraints>
      <xy x="20" y="20" width="758" height="456"/>
    </constraints>
    <properties/>
    <border type="none"/>
    <children>
      <component id="5765b" class="javax.swing.JLabel">
        <constraints>
          <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="0" fill="0" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties>
          <font size="18"/>
          <text value="TSP Solver Help"/>
        </properties>
      </component>
      <component id="88ced" class="javax.swing.JTextPane" binding="mainText">
        <constraints>
          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="6" hsize-policy="6" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties>
          <editable value="false"/>
          <text value="TSP stands for Travelling Salesman Problem. It is the problem of finding the shortest path that visits all points.&#10;&#10;Before the algorithm is run, the level is restarted.&#10;&#10;The pathfinding algorithm ignores all monsters, as well as most tiles. The only thing it takes into account are:&#10;Chip, ice, force floors and walls (except closed toggle doors). However, on solution playback the player may still die.&#10;If that is a problem, the level should be modified to take this into account (through the levelset, not the cheat menu).&#10;&#10;Nodes represent all the tiles the player has to visit before going to an exit.&#10;Exits represent the possible ending tiles. There must be at least one.&#10;Restrictions define which tiles should be visited before some other tile.&#10;&#10;To manually enter your own tiles and restrictions, you must enter their coordinates as space-separated numbers between 0 and 31 inclusive.&#10;Nodes and exits take the form: x y&#10;Restrictions take the form: x1 y1 x2 y2, which means that (x1, y1) must be visited before (x2, y2).&#10;&#10;The solver uses the simulated annealing algorithm, which takes four inputs:&#10;Starting temperature is the starting value of the temerpature parameter, which decreases over time at each step.&#10;Ending temperature is the boundary value that ends the algorithm when temperature goes below it.&#10;Cooling factor is the value temperature is multiplied by at each step, it must by smaller than 1. Optimally, it should be as close to 1 as possible.&#10;Iterations is how many different paths the algorithm will try at each step.&#10;&#10;The closer the cooling factor is to 1, the slower the temperature will drop, meaning the algorithm will take longer to run, but it's more likely&#10;to find the best solution.&#10;&#10;The buttons suggest four possible configurations, however, the parameters are fulling customizable."/>
        </properties>
      </component>
    </children>
  </grid>
</form>
